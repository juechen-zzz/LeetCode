/* 
有两种形状的瓷砖：一种是 2x1 的多米诺形，另一种是形如 "L" 的托米诺形。两种形状都可以旋转。

XX  <- 多米诺

XX  <- "L" 托米诺
X
给定 N 的值，有多少种方法可以平铺 2 x N 的面板？返回值 mod 10^9 + 7。

（平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。）

示例:
输入: 3
输出: 5
解释: 
下面列出了五种不同的方法，不同字母代表不同瓷砖：
XYZ XXZ XYY XXY XYY
XYZ YYZ XZZ XYY XXY

 */

// 分析四种不同的铺砖状态可在哪些状态下转换得到。
// 1 两行都不铺
//      两列都未铺，然后在第一行垂直铺多米诺瓷砖
//      第一列已铺，第二列未铺，且不铺砖

// 2 第一行不铺，第二行铺
//      两列都未铺，然后铺多米诺瓷砖
//      第一列第一行已铺，然后在第一列第二行水平铺多米诺瓷砖

// 3 第一行铺，第二行不铺 ---- 与第一行不铺，第二行铺的方法对称

// 4 两行都铺
//      两列都未铺，然后水平铺两个多米诺瓷砖
//      第一列有一行已铺，然后铺一个托米诺瓷砖（实际上是两种情况）
class Solution {
    private static final int MOD = 1_000_000_007;

    public int numTilings(int n) {
        long[] dp = new long[]{1, 0, 0, 0};
        for (int i = 0; i < n; i++) {
            long[] ndp = new long[4];
            ndp[0] = (dp[0] + dp[3]) % MOD;
            ndp[1] = (dp[0] + dp[2]) % MOD;
            ndp[2] = (dp[0] + dp[1]) % MOD;
            ndp[3] = (dp[0] + dp[1] + dp[2]) % MOD;
            dp = ndp;
        }
        return (int)dp[0];
    }
}